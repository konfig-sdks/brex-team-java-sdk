/*
 * Team API
 *  The team API lets you manage users, departments, locations, and cards. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Card;
import com.konfigthis.client.model.CardMailingAddress;
import com.konfigthis.client.model.CardNumberResponse;
import com.konfigthis.client.model.CardType;
import com.konfigthis.client.model.ChangeCardReason;
import com.konfigthis.client.model.CreateCardRequest;
import com.konfigthis.client.model.CreateCardRequestCardAttributePreferences;
import com.konfigthis.client.model.CreateCardRequestSpendControls;
import com.konfigthis.client.model.LimitType;
import com.konfigthis.client.model.LockCardRequest;
import com.konfigthis.client.model.PageCard;
import com.konfigthis.client.model.SecureEmailForCardDetailsRequest;
import com.konfigthis.client.model.TerminateCardRequest;
import com.konfigthis.client.model.UpdateCardRequest;
import com.konfigthis.client.model.UpdateCardRequestSpendControls;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CardsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CardsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCardCall(String idempotencyKey, CreateCardRequest createCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCardRequest;

        // create path and map variables
        String localVarPath = "/v2/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCardValidateBeforeCall(String idempotencyKey, CreateCardRequest createCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createNewCard(Async)");
        }

        // verify the required parameter 'createCardRequest' is set
        if (createCardRequest == null) {
            throw new ApiException("Missing the required parameter 'createCardRequest' when calling createNewCard(Async)");
        }

        return createNewCardCall(idempotencyKey, createCardRequest, _callback);

    }


    private ApiResponse<Card> createNewCardWithHttpInfo(String idempotencyKey, CreateCardRequest createCardRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewCardValidateBeforeCall(idempotencyKey, createCardRequest, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCardAsync(String idempotencyKey, CreateCardRequest createCardRequest, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCardValidateBeforeCall(idempotencyKey, createCardRequest, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCardRequestBuilder {
        private final Object owner;
        private final String cardName;
        private final CardType cardType;
        private final LimitType limitType;
        private final String idempotencyKey;
        private CreateCardRequestSpendControls spendControls;
        private CardMailingAddress mailingAddress;
        private Map<String, String> metadata;
        private CreateCardRequestCardAttributePreferences cardAttributePreferences;

        private CreateNewCardRequestBuilder(Object owner, String cardName, CardType cardType, LimitType limitType, String idempotencyKey) {
            this.owner = owner;
            this.cardName = cardName;
            this.cardType = cardType;
            this.limitType = limitType;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set spendControls
         * @param spendControls  (optional)
         * @return CreateNewCardRequestBuilder
         */
        public CreateNewCardRequestBuilder spendControls(CreateCardRequestSpendControls spendControls) {
            this.spendControls = spendControls;
            return this;
        }
        
        /**
         * Set mailingAddress
         * @param mailingAddress  (optional)
         * @return CreateNewCardRequestBuilder
         */
        public CreateNewCardRequestBuilder mailingAddress(CardMailingAddress mailingAddress) {
            this.mailingAddress = mailingAddress;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  Set of key value pairs associated with this object. Please do not store any personally identifiable or sensitive information here. Limitations: maximum of 50 keys, keys cannot exceed 40 characters, values cannot exceed 500 characters.   (optional)
         * @return CreateNewCardRequestBuilder
         */
        public CreateNewCardRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set cardAttributePreferences
         * @param cardAttributePreferences  (optional)
         * @return CreateNewCardRequestBuilder
         */
        public CreateNewCardRequestBuilder cardAttributePreferences(CreateCardRequestCardAttributePreferences cardAttributePreferences) {
            this.cardAttributePreferences = cardAttributePreferences;
            return this;
        }
        
        /**
         * Build call for createNewCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCardRequest createCardRequest = buildBodyParams();
            return createNewCardCall(idempotencyKey, createCardRequest, _callback);
        }

        private CreateCardRequest buildBodyParams() {
            CreateCardRequest createCardRequest = new CreateCardRequest();
            createCardRequest.owner(this.owner);
            createCardRequest.cardName(this.cardName);
            createCardRequest.cardType(this.cardType);
            createCardRequest.limitType(this.limitType);
            createCardRequest.spendControls(this.spendControls);
            createCardRequest.mailingAddress(this.mailingAddress);
            createCardRequest.metadata(this.metadata);
            createCardRequest.cardAttributePreferences(this.cardAttributePreferences);
            return createCardRequest;
        }

        /**
         * Execute createNewCard request
         * @return Card
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Card execute() throws ApiException {
            CreateCardRequest createCardRequest = buildBodyParams();
            ApiResponse<Card> localVarResp = createNewCardWithHttpInfo(idempotencyKey, createCardRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCard request with HTTP info returned
         * @return ApiResponse&lt;Card&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Card> executeWithHttpInfo() throws ApiException {
            CreateCardRequest createCardRequest = buildBodyParams();
            return createNewCardWithHttpInfo(idempotencyKey, createCardRequest);
        }

        /**
         * Execute createNewCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Card> _callback) throws ApiException {
            CreateCardRequest createCardRequest = buildBodyParams();
            return createNewCardAsync(idempotencyKey, createCardRequest, _callback);
        }
    }

    /**
     *  Create card 
     *  Creates a new card. The &#x60;spend_controls&#x60; field is required when &#x60;limit_type&#x60; &#x3D; &#x60;CARD&#x60;. The &#x60;mailing_address&#x60; field is required for physical cards and is the shipping address used to send the card; it is not the same as the billing and mailing address used for online purchases. The first 2 lines of this address must be under 60 characters long. Each user can only have up to 10 active physical cards. For Empower accounts, this endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @param idempotencyKey  (required)
     * @param createCardRequest  (required)
     * @return CreateNewCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createCard 200 response </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCardRequestBuilder createNewCard(Object owner, String cardName, CardType cardType, LimitType limitType, String idempotencyKey) throws IllegalArgumentException {
        
        if (cardName == null) throw new IllegalArgumentException("\"cardName\" is required but got null");
            if (cardName != null && cardName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for cardName. Length must be greater than or equal to 1.");
            }

        if (cardType == null) throw new IllegalArgumentException("\"cardType\" is required but got null");
        if (limitType == null) throw new IllegalArgumentException("\"limitType\" is required but got null");
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new CreateNewCardRequestBuilder(owner, cardName, cardType, limitType, idempotencyKey);
    }
    private okhttp3.Call createSecureEmailCall(String id, String idempotencyKey, SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = secureEmailForCardDetailsRequest;

        // create path and map variables
        String localVarPath = "/v2/cards/{id}/secure_email"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSecureEmailValidateBeforeCall(String id, String idempotencyKey, SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createSecureEmail(Async)");
        }

        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createSecureEmail(Async)");
        }

        // verify the required parameter 'secureEmailForCardDetailsRequest' is set
        if (secureEmailForCardDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'secureEmailForCardDetailsRequest' when calling createSecureEmail(Async)");
        }

        return createSecureEmailCall(id, idempotencyKey, secureEmailForCardDetailsRequest, _callback);

    }


    private ApiResponse<Void> createSecureEmailWithHttpInfo(String id, String idempotencyKey, SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = createSecureEmailValidateBeforeCall(id, idempotencyKey, secureEmailForCardDetailsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createSecureEmailAsync(String id, String idempotencyKey, SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSecureEmailValidateBeforeCall(id, idempotencyKey, secureEmailForCardDetailsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateSecureEmailRequestBuilder {
        private final String id;
        private final String idempotencyKey;
        private String recipientEmail;
        private String senderName;
        private String message;
        private Integer expiryDays;

        private CreateSecureEmailRequestBuilder(String id, String idempotencyKey) {
            this.id = id;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set recipientEmail
         * @param recipientEmail Email address to send card details to (optional)
         * @return CreateSecureEmailRequestBuilder
         */
        public CreateSecureEmailRequestBuilder recipientEmail(String recipientEmail) {
            this.recipientEmail = recipientEmail;
            return this;
        }
        
        /**
         * Set senderName
         * @param senderName Sender name. Shows up in the subject of the email (optional)
         * @return CreateSecureEmailRequestBuilder
         */
        public CreateSecureEmailRequestBuilder senderName(String senderName) {
            this.senderName = senderName;
            return this;
        }
        
        /**
         * Set message
         * @param message Message to send with the card details (optional)
         * @return CreateSecureEmailRequestBuilder
         */
        public CreateSecureEmailRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set expiryDays
         * @param expiryDays Link expiry in number of days. Defaults to 30 (optional)
         * @return CreateSecureEmailRequestBuilder
         */
        public CreateSecureEmailRequestBuilder expiryDays(Integer expiryDays) {
            this.expiryDays = expiryDays;
            return this;
        }
        
        /**
         * Build call for createSecureEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> emailCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest = buildBodyParams();
            return createSecureEmailCall(id, idempotencyKey, secureEmailForCardDetailsRequest, _callback);
        }

        private SecureEmailForCardDetailsRequest buildBodyParams() {
            SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest = new SecureEmailForCardDetailsRequest();
            secureEmailForCardDetailsRequest.recipientEmail(this.recipientEmail);
            secureEmailForCardDetailsRequest.senderName(this.senderName);
            secureEmailForCardDetailsRequest.message(this.message);
            secureEmailForCardDetailsRequest.expiryDays(this.expiryDays);
            return secureEmailForCardDetailsRequest;
        }

        /**
         * Execute createSecureEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> emailCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest = buildBodyParams();
            createSecureEmailWithHttpInfo(id, idempotencyKey, secureEmailForCardDetailsRequest);
        }

        /**
         * Execute createSecureEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> emailCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest = buildBodyParams();
            return createSecureEmailWithHttpInfo(id, idempotencyKey, secureEmailForCardDetailsRequest);
        }

        /**
         * Execute createSecureEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> emailCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SecureEmailForCardDetailsRequest secureEmailForCardDetailsRequest = buildBodyParams();
            return createSecureEmailAsync(id, idempotencyKey, secureEmailForCardDetailsRequest, _callback);
        }
    }

    /**
     *  Create secure email to send card number  
     *  Creates a secure email to send card number, CVV, and expiration date of a card by ID to the specified email.  This endpoint is currently gated. If you would like to request access, please reach out to developer-access@brex.com 
     * @param id  (required)
     * @param idempotencyKey  (required)
     * @param secureEmailForCardDetailsRequest  (required)
     * @return CreateSecureEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> emailCardNumber 200 response </td><td>  -  </td></tr>
     </table>
     */
    public CreateSecureEmailRequestBuilder createSecureEmail(String id, String idempotencyKey) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new CreateSecureEmailRequestBuilder(id, idempotencyKey);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cards/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<Card> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return Card
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Card execute() throws ApiException {
            ApiResponse<Card> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Card&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Card> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Card> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     *  Get card 
     *  Retrieves a card by ID. Only cards with &#x60;limit_type &#x3D; CARD&#x60; have &#x60;spend_controls&#x60; 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCardById 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getCardDetailsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://secure-platform.brexapis.com", "https://secure-platform.staging.brexapps.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cards/{id}/pan"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardDetailsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCardDetails(Async)");
        }

        return getCardDetailsCall(id, _callback);

    }


    private ApiResponse<CardNumberResponse> getCardDetailsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getCardDetailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CardNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCardDetailsAsync(String id, final ApiCallback<CardNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardDetailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CardNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCardDetailsRequestBuilder {
        private final String id;

        private GetCardDetailsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getCardDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCardDetailsCall(id, _callback);
        }


        /**
         * Execute getCardDetails request
         * @return CardNumberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public CardNumberResponse execute() throws ApiException {
            ApiResponse<CardNumberResponse> localVarResp = getCardDetailsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCardDetails request with HTTP info returned
         * @return ApiResponse&lt;CardNumberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CardNumberResponse> executeWithHttpInfo() throws ApiException {
            return getCardDetailsWithHttpInfo(id);
        }

        /**
         * Execute getCardDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getCardNumber 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CardNumberResponse> _callback) throws ApiException {
            return getCardDetailsAsync(id, _callback);
        }
    }

    /**
     *  Get card number 
     *  Retrieves card number, CVV, and expiration date of a card by ID. 
     * @param id  (required)
     * @return GetCardDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getCardNumber 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetCardDetailsRequestBuilder getCardDetails(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCardDetailsRequestBuilder(id);
    }
    private okhttp3.Call listByUserIdCall(String userId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByUserIdValidateBeforeCall(String userId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listByUserIdCall(userId, cursor, limit, _callback);

    }


    private ApiResponse<PageCard> listByUserIdWithHttpInfo(String userId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listByUserIdValidateBeforeCall(userId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<PageCard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByUserIdAsync(String userId, String cursor, Integer limit, final ApiCallback<PageCard> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByUserIdValidateBeforeCall(userId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<PageCard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByUserIdRequestBuilder {
        private String userId;
        private String cursor;
        private Integer limit;

        private ListByUserIdRequestBuilder() {
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListByUserIdRequestBuilder
         */
        public ListByUserIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCardsByUserId 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByUserIdCall(userId, cursor, limit, _callback);
        }


        /**
         * Execute listByUserId request
         * @return PageCard
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCardsByUserId 200 response </td><td>  -  </td></tr>
         </table>
         */
        public PageCard execute() throws ApiException {
            ApiResponse<PageCard> localVarResp = listByUserIdWithHttpInfo(userId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByUserId request with HTTP info returned
         * @return ApiResponse&lt;PageCard&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCardsByUserId 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageCard> executeWithHttpInfo() throws ApiException {
            return listByUserIdWithHttpInfo(userId, cursor, limit);
        }

        /**
         * Execute listByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listCardsByUserId 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageCard> _callback) throws ApiException {
            return listByUserIdAsync(userId, cursor, limit, _callback);
        }
    }

    /**
     *  List cards 
     *  Lists all cards by a &#x60;user_id&#x60;. Only cards with &#x60;limit_type &#x3D; CARD&#x60; have &#x60;spend_controls&#x60; 
     * @return ListByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listCardsByUserId 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ListByUserIdRequestBuilder listByUserId() throws IllegalArgumentException {
        return new ListByUserIdRequestBuilder();
    }
    private okhttp3.Call lockCardCall(String id, LockCardRequest lockCardRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lockCardRequest;

        // create path and map variables
        String localVarPath = "/v2/cards/{id}/lock"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockCardValidateBeforeCall(String id, LockCardRequest lockCardRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lockCard(Async)");
        }

        // verify the required parameter 'lockCardRequest' is set
        if (lockCardRequest == null) {
            throw new ApiException("Missing the required parameter 'lockCardRequest' when calling lockCard(Async)");
        }

        return lockCardCall(id, lockCardRequest, idempotencyKey, _callback);

    }


    private ApiResponse<Card> lockCardWithHttpInfo(String id, LockCardRequest lockCardRequest, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = lockCardValidateBeforeCall(id, lockCardRequest, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lockCardAsync(String id, LockCardRequest lockCardRequest, String idempotencyKey, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockCardValidateBeforeCall(id, lockCardRequest, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LockCardRequestBuilder {
        private final ChangeCardReason reason;
        private final String id;
        private String description;
        private String idempotencyKey;

        private LockCardRequestBuilder(ChangeCardReason reason, String id) {
            this.reason = reason;
            this.id = id;
        }

        /**
         * Set description
         * @param description Description for locking a card (optional)
         * @return LockCardRequestBuilder
         */
        public LockCardRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return LockCardRequestBuilder
         */
        public LockCardRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for lockCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> lockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LockCardRequest lockCardRequest = buildBodyParams();
            return lockCardCall(id, lockCardRequest, idempotencyKey, _callback);
        }

        private LockCardRequest buildBodyParams() {
            LockCardRequest lockCardRequest = new LockCardRequest();
            lockCardRequest.description(this.description);
            lockCardRequest.reason(this.reason);
            return lockCardRequest;
        }

        /**
         * Execute lockCard request
         * @return Card
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> lockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Card execute() throws ApiException {
            LockCardRequest lockCardRequest = buildBodyParams();
            ApiResponse<Card> localVarResp = lockCardWithHttpInfo(id, lockCardRequest, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lockCard request with HTTP info returned
         * @return ApiResponse&lt;Card&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> lockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Card> executeWithHttpInfo() throws ApiException {
            LockCardRequest lockCardRequest = buildBodyParams();
            return lockCardWithHttpInfo(id, lockCardRequest, idempotencyKey);
        }

        /**
         * Execute lockCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> lockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Card> _callback) throws ApiException {
            LockCardRequest lockCardRequest = buildBodyParams();
            return lockCardAsync(id, lockCardRequest, idempotencyKey, _callback);
        }
    }

    /**
     *  Lock card 
     *  Locks an existing, unlocked card. And the card owner will receive a notification about it. 
     * @param id  (required)
     * @param lockCardRequest  (required)
     * @return LockCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> lockCard 200 response </td><td>  -  </td></tr>
     </table>
     */
    public LockCardRequestBuilder lockCard(ChangeCardReason reason, String id) throws IllegalArgumentException {
        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new LockCardRequestBuilder(reason, id);
    }
    private okhttp3.Call terminateExistingCardCall(String id, TerminateCardRequest terminateCardRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = terminateCardRequest;

        // create path and map variables
        String localVarPath = "/v2/cards/{id}/terminate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateExistingCardValidateBeforeCall(String id, TerminateCardRequest terminateCardRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling terminateExistingCard(Async)");
        }

        // verify the required parameter 'terminateCardRequest' is set
        if (terminateCardRequest == null) {
            throw new ApiException("Missing the required parameter 'terminateCardRequest' when calling terminateExistingCard(Async)");
        }

        return terminateExistingCardCall(id, terminateCardRequest, idempotencyKey, _callback);

    }


    private ApiResponse<Card> terminateExistingCardWithHttpInfo(String id, TerminateCardRequest terminateCardRequest, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = terminateExistingCardValidateBeforeCall(id, terminateCardRequest, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call terminateExistingCardAsync(String id, TerminateCardRequest terminateCardRequest, String idempotencyKey, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateExistingCardValidateBeforeCall(id, terminateCardRequest, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TerminateExistingCardRequestBuilder {
        private final ChangeCardReason reason;
        private final String id;
        private String description;
        private String idempotencyKey;

        private TerminateExistingCardRequestBuilder(ChangeCardReason reason, String id) {
            this.reason = reason;
            this.id = id;
        }

        /**
         * Set description
         * @param description Description for terminating a card (optional)
         * @return TerminateExistingCardRequestBuilder
         */
        public TerminateExistingCardRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return TerminateExistingCardRequestBuilder
         */
        public TerminateExistingCardRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for terminateExistingCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> terminateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TerminateCardRequest terminateCardRequest = buildBodyParams();
            return terminateExistingCardCall(id, terminateCardRequest, idempotencyKey, _callback);
        }

        private TerminateCardRequest buildBodyParams() {
            TerminateCardRequest terminateCardRequest = new TerminateCardRequest();
            terminateCardRequest.description(this.description);
            terminateCardRequest.reason(this.reason);
            return terminateCardRequest;
        }

        /**
         * Execute terminateExistingCard request
         * @return Card
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> terminateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Card execute() throws ApiException {
            TerminateCardRequest terminateCardRequest = buildBodyParams();
            ApiResponse<Card> localVarResp = terminateExistingCardWithHttpInfo(id, terminateCardRequest, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute terminateExistingCard request with HTTP info returned
         * @return ApiResponse&lt;Card&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> terminateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Card> executeWithHttpInfo() throws ApiException {
            TerminateCardRequest terminateCardRequest = buildBodyParams();
            return terminateExistingCardWithHttpInfo(id, terminateCardRequest, idempotencyKey);
        }

        /**
         * Execute terminateExistingCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> terminateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Card> _callback) throws ApiException {
            TerminateCardRequest terminateCardRequest = buildBodyParams();
            return terminateExistingCardAsync(id, terminateCardRequest, idempotencyKey, _callback);
        }
    }

    /**
     *  Terminate card 
     *  Terminates an existing card. The card owner will receive a notification about it. 
     * @param id  (required)
     * @param terminateCardRequest  (required)
     * @return TerminateExistingCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> terminateCard 200 response </td><td>  -  </td></tr>
     </table>
     */
    public TerminateExistingCardRequestBuilder terminateExistingCard(ChangeCardReason reason, String id) throws IllegalArgumentException {
        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new TerminateExistingCardRequestBuilder(reason, id);
    }
    private okhttp3.Call unlockExistingCardCall(String id, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cards/{id}/unlock"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockExistingCardValidateBeforeCall(String id, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unlockExistingCard(Async)");
        }

        return unlockExistingCardCall(id, idempotencyKey, _callback);

    }


    private ApiResponse<Card> unlockExistingCardWithHttpInfo(String id, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = unlockExistingCardValidateBeforeCall(id, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unlockExistingCardAsync(String id, String idempotencyKey, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockExistingCardValidateBeforeCall(id, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnlockExistingCardRequestBuilder {
        private final String id;
        private String idempotencyKey;

        private UnlockExistingCardRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return UnlockExistingCardRequestBuilder
         */
        public UnlockExistingCardRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for unlockExistingCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> unlockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unlockExistingCardCall(id, idempotencyKey, _callback);
        }


        /**
         * Execute unlockExistingCard request
         * @return Card
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> unlockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Card execute() throws ApiException {
            ApiResponse<Card> localVarResp = unlockExistingCardWithHttpInfo(id, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unlockExistingCard request with HTTP info returned
         * @return ApiResponse&lt;Card&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> unlockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Card> executeWithHttpInfo() throws ApiException {
            return unlockExistingCardWithHttpInfo(id, idempotencyKey);
        }

        /**
         * Execute unlockExistingCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> unlockCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Card> _callback) throws ApiException {
            return unlockExistingCardAsync(id, idempotencyKey, _callback);
        }
    }

    /**
     *  Unlock card 
     *  Unlocks an existing card. 
     * @param id  (required)
     * @return UnlockExistingCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> unlockCard 200 response </td><td>  -  </td></tr>
     </table>
     */
    public UnlockExistingCardRequestBuilder unlockExistingCard(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UnlockExistingCardRequestBuilder(id);
    }
    private okhttp3.Call updateCardCall(String id, UpdateCardRequest updateCardRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCardRequest;

        // create path and map variables
        String localVarPath = "/v2/cards/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardValidateBeforeCall(String id, UpdateCardRequest updateCardRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCard(Async)");
        }

        // verify the required parameter 'updateCardRequest' is set
        if (updateCardRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCardRequest' when calling updateCard(Async)");
        }

        return updateCardCall(id, updateCardRequest, idempotencyKey, _callback);

    }


    private ApiResponse<Card> updateCardWithHttpInfo(String id, UpdateCardRequest updateCardRequest, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = updateCardValidateBeforeCall(id, updateCardRequest, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCardAsync(String id, UpdateCardRequest updateCardRequest, String idempotencyKey, final ApiCallback<Card> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardValidateBeforeCall(id, updateCardRequest, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCardRequestBuilder {
        private final String id;
        private UpdateCardRequestSpendControls spendControls;
        private Map<String, String> metadata;
        private String idempotencyKey;

        private UpdateCardRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set spendControls
         * @param spendControls  (optional)
         * @return UpdateCardRequestBuilder
         */
        public UpdateCardRequestBuilder spendControls(UpdateCardRequestSpendControls spendControls) {
            this.spendControls = spendControls;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  Set of key value pairs associated with this object. Please do not store any personally identifiable or sensitive information here. Limitations: maximum of 50 keys, keys cannot exceed 40 characters, values cannot exceed 500 characters.   (optional)
         * @return UpdateCardRequestBuilder
         */
        public UpdateCardRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return UpdateCardRequestBuilder
         */
        public UpdateCardRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for updateCard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCardRequest updateCardRequest = buildBodyParams();
            return updateCardCall(id, updateCardRequest, idempotencyKey, _callback);
        }

        private UpdateCardRequest buildBodyParams() {
            UpdateCardRequest updateCardRequest = new UpdateCardRequest();
            updateCardRequest.spendControls(this.spendControls);
            updateCardRequest.metadata(this.metadata);
            return updateCardRequest;
        }

        /**
         * Execute updateCard request
         * @return Card
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Card execute() throws ApiException {
            UpdateCardRequest updateCardRequest = buildBodyParams();
            ApiResponse<Card> localVarResp = updateCardWithHttpInfo(id, updateCardRequest, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCard request with HTTP info returned
         * @return ApiResponse&lt;Card&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Card> executeWithHttpInfo() throws ApiException {
            UpdateCardRequest updateCardRequest = buildBodyParams();
            return updateCardWithHttpInfo(id, updateCardRequest, idempotencyKey);
        }

        /**
         * Execute updateCard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateCard 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Card> _callback) throws ApiException {
            UpdateCardRequest updateCardRequest = buildBodyParams();
            return updateCardAsync(id, updateCardRequest, idempotencyKey, _callback);
        }
    }

    /**
     *  Update card 
     *  Update an existing vendor card 
     * @param id  (required)
     * @param updateCardRequest  (required)
     * @return UpdateCardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateCard 200 response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCardRequestBuilder updateCard(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateCardRequestBuilder(id);
    }
}
