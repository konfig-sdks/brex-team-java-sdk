/*
 * Team API
 *  The team API lets you manage users, departments, locations, and cards. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateUserRequest;
import com.konfigthis.client.model.PageUserResponse;
import com.konfigthis.client.model.SetUserLimitRequest;
import com.konfigthis.client.model.SetUserLimitRequestMonthlyLimit;
import com.konfigthis.client.model.UpdateUserRequest;
import com.konfigthis.client.model.UpdateUserStatus;
import com.konfigthis.client.model.UserLimitResponse;
import com.konfigthis.client.model.UserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCurrentUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentUserCall(_callback);

    }


    private ApiResponse<UserResponse> getCurrentUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentUserAsync(final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentUserRequestBuilder {

        private GetCurrentUserRequestBuilder() {
        }

        /**
         * Build call for getCurrentUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getMe 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentUserCall(_callback);
        }


        /**
         * Execute getCurrentUser request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getMe 200 response </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            ApiResponse<UserResponse> localVarResp = getCurrentUserWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentUser request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getMe 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            return getCurrentUserWithHttpInfo();
        }

        /**
         * Execute getCurrentUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getMe 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            return getCurrentUserAsync(_callback);
        }
    }

    /**
     *  Get current user 
     *  This endpoint returns the user associated with the OAuth2 access token. 
     * @return GetCurrentUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getMe 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserRequestBuilder getCurrentUser() throws IllegalArgumentException {
        return new GetCurrentUserRequestBuilder();
    }
    private okhttp3.Call getMonthlyLimitCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{id}/limit"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonthlyLimitValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMonthlyLimit(Async)");
        }

        return getMonthlyLimitCall(id, _callback);

    }


    private ApiResponse<UserLimitResponse> getMonthlyLimitWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getMonthlyLimitValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserLimitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMonthlyLimitAsync(String id, final ApiCallback<UserLimitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonthlyLimitValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserLimitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMonthlyLimitRequestBuilder {
        private final String id;

        private GetMonthlyLimitRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getMonthlyLimit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMonthlyLimitCall(id, _callback);
        }


        /**
         * Execute getMonthlyLimit request
         * @return UserLimitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public UserLimitResponse execute() throws ApiException {
            ApiResponse<UserLimitResponse> localVarResp = getMonthlyLimitWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMonthlyLimit request with HTTP info returned
         * @return ApiResponse&lt;UserLimitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserLimitResponse> executeWithHttpInfo() throws ApiException {
            return getMonthlyLimitWithHttpInfo(id);
        }

        /**
         * Execute getMonthlyLimit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserLimitResponse> _callback) throws ApiException {
            return getMonthlyLimitAsync(id, _callback);
        }
    }

    /**
     *  Get limit for the user 
     *  This endpoint gets the monthly limit for the user including the monthly available limit. 
     * @param id  (required)
     * @return GetMonthlyLimitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserLimit 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetMonthlyLimitRequestBuilder getMonthlyLimit(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetMonthlyLimitRequestBuilder(id);
    }
    private okhttp3.Call getUserByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserById(Async)");
        }

        return getUserByIdCall(id, _callback);

    }


    private ApiResponse<UserResponse> getUserByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByIdAsync(String id, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByIdRequestBuilder {
        private final String id;

        private GetUserByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByIdCall(id, _callback);
        }


        /**
         * Execute getUserById request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            ApiResponse<UserResponse> localVarResp = getUserByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserById request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            return getUserByIdWithHttpInfo(id);
        }

        /**
         * Execute getUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getUserById 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            return getUserByIdAsync(id, _callback);
        }
    }

    /**
     *  Get user 
     *  This endpoint gets a user by ID. 
     * @param id  (required)
     * @return GetUserByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getUserById 200 response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByIdRequestBuilder getUserById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetUserByIdRequestBuilder(id);
    }
    private okhttp3.Call inviteNewEmployeeCall(CreateUserRequest createUserRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/v2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteNewEmployeeValidateBeforeCall(CreateUserRequest createUserRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling inviteNewEmployee(Async)");
        }

        return inviteNewEmployeeCall(createUserRequest, idempotencyKey, _callback);

    }


    private ApiResponse<UserResponse> inviteNewEmployeeWithHttpInfo(CreateUserRequest createUserRequest, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = inviteNewEmployeeValidateBeforeCall(createUserRequest, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteNewEmployeeAsync(CreateUserRequest createUserRequest, String idempotencyKey, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteNewEmployeeValidateBeforeCall(createUserRequest, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteNewEmployeeRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String email;
        private String managerId;
        private String departmentId;
        private String locationId;
        private String titleId;
        private Map<String, String> metadata;
        private String idempotencyKey;

        private InviteNewEmployeeRequestBuilder(String firstName, String lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }

        /**
         * Set managerId
         * @param managerId  (optional)
         * @return InviteNewEmployeeRequestBuilder
         */
        public InviteNewEmployeeRequestBuilder managerId(String managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId  (optional)
         * @return InviteNewEmployeeRequestBuilder
         */
        public InviteNewEmployeeRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId  (optional)
         * @return InviteNewEmployeeRequestBuilder
         */
        public InviteNewEmployeeRequestBuilder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set titleId
         * @param titleId  (optional)
         * @return InviteNewEmployeeRequestBuilder
         */
        public InviteNewEmployeeRequestBuilder titleId(String titleId) {
            this.titleId = titleId;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata The metadata or customized attributes of the user. Maximum number of entries: 100 (optional)
         * @return InviteNewEmployeeRequestBuilder
         */
        public InviteNewEmployeeRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return InviteNewEmployeeRequestBuilder
         */
        public InviteNewEmployeeRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for inviteNewEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            return inviteNewEmployeeCall(createUserRequest, idempotencyKey, _callback);
        }

        private CreateUserRequest buildBodyParams() {
            CreateUserRequest createUserRequest = new CreateUserRequest();
            createUserRequest.firstName(this.firstName);
            createUserRequest.lastName(this.lastName);
            createUserRequest.email(this.email);
            createUserRequest.managerId(this.managerId);
            createUserRequest.departmentId(this.departmentId);
            createUserRequest.locationId(this.locationId);
            createUserRequest.titleId(this.titleId);
            createUserRequest.metadata(this.metadata);
            return createUserRequest;
        }

        /**
         * Execute inviteNewEmployee request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            ApiResponse<UserResponse> localVarResp = inviteNewEmployeeWithHttpInfo(createUserRequest, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteNewEmployee request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            return inviteNewEmployeeWithHttpInfo(createUserRequest, idempotencyKey);
        }

        /**
         * Execute inviteNewEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            CreateUserRequest createUserRequest = buildBodyParams();
            return inviteNewEmployeeAsync(createUserRequest, idempotencyKey, _callback);
        }
    }

    /**
     *  Invite user 
     *  This endpoint invites a new user as an employee. To update user&#39;s role, check out [this article](https://support.brex.com/how-do-i-change-another-user-s-role/). 
     * @param createUserRequest  (required)
     * @return InviteNewEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createUser 200 response </td><td>  -  </td></tr>
     </table>
     */
    public InviteNewEmployeeRequestBuilder inviteNewEmployee(String firstName, String lastName, String email) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            if (firstName != null && firstName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
            }

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            if (lastName != null && lastName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
            }

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new InviteNewEmployeeRequestBuilder(firstName, lastName, email);
    }
    private okhttp3.Call listUsersCall(String cursor, Integer limit, String email, String remoteDisplayId, List<String> expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (remoteDisplayId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remote_display_id", remoteDisplayId));
        }

        if (expand != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "expand[]", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(String cursor, Integer limit, String email, String remoteDisplayId, List<String> expand, final ApiCallback _callback) throws ApiException {
        return listUsersCall(cursor, limit, email, remoteDisplayId, expand, _callback);

    }


    private ApiResponse<PageUserResponse> listUsersWithHttpInfo(String cursor, Integer limit, String email, String remoteDisplayId, List<String> expand) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(cursor, limit, email, remoteDisplayId, expand, null);
        Type localVarReturnType = new TypeToken<PageUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUsersAsync(String cursor, Integer limit, String email, String remoteDisplayId, List<String> expand, final ApiCallback<PageUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(cursor, limit, email, remoteDisplayId, expand, _callback);
        Type localVarReturnType = new TypeToken<PageUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUsersRequestBuilder {
        private String cursor;
        private Integer limit;
        private String email;
        private String remoteDisplayId;
        private List<String> expand;

        private ListUsersRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set remoteDisplayId
         * @param remoteDisplayId  (optional)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder remoteDisplayId(String remoteDisplayId) {
            this.remoteDisplayId = remoteDisplayId;
            return this;
        }
        
        /**
         * Set expand
         * @param expand  (optional)
         * @return ListUsersRequestBuilder
         */
        public ListUsersRequestBuilder expand(List<String> expand) {
            this.expand = expand;
            return this;
        }
        
        /**
         * Build call for listUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listUsers 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUsersCall(cursor, limit, email, remoteDisplayId, expand, _callback);
        }


        /**
         * Execute listUsers request
         * @return PageUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listUsers 200 response </td><td>  -  </td></tr>
         </table>
         */
        public PageUserResponse execute() throws ApiException {
            ApiResponse<PageUserResponse> localVarResp = listUsersWithHttpInfo(cursor, limit, email, remoteDisplayId, expand);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUsers request with HTTP info returned
         * @return ApiResponse&lt;PageUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listUsers 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageUserResponse> executeWithHttpInfo() throws ApiException {
            return listUsersWithHttpInfo(cursor, limit, email, remoteDisplayId, expand);
        }

        /**
         * Execute listUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listUsers 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageUserResponse> _callback) throws ApiException {
            return listUsersAsync(cursor, limit, email, remoteDisplayId, expand, _callback);
        }
    }

    /**
     *  List users 
     *  This endpoint lists all users. To find a user id by email, you can filter using the &#x60;email&#x60; query parameter. 
     * @return ListUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listUsers 200 response </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersRequestBuilder listUsers() throws IllegalArgumentException {
        return new ListUsersRequestBuilder();
    }
    private okhttp3.Call setMonthlyLimitCall(String id, SetUserLimitRequest setUserLimitRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setUserLimitRequest;

        // create path and map variables
        String localVarPath = "/v2/users/{id}/limit"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMonthlyLimitValidateBeforeCall(String id, SetUserLimitRequest setUserLimitRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setMonthlyLimit(Async)");
        }

        // verify the required parameter 'setUserLimitRequest' is set
        if (setUserLimitRequest == null) {
            throw new ApiException("Missing the required parameter 'setUserLimitRequest' when calling setMonthlyLimit(Async)");
        }

        return setMonthlyLimitCall(id, setUserLimitRequest, idempotencyKey, _callback);

    }


    private ApiResponse<UserLimitResponse> setMonthlyLimitWithHttpInfo(String id, SetUserLimitRequest setUserLimitRequest, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = setMonthlyLimitValidateBeforeCall(id, setUserLimitRequest, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<UserLimitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setMonthlyLimitAsync(String id, SetUserLimitRequest setUserLimitRequest, String idempotencyKey, final ApiCallback<UserLimitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMonthlyLimitValidateBeforeCall(id, setUserLimitRequest, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<UserLimitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetMonthlyLimitRequestBuilder {
        private final String id;
        private SetUserLimitRequestMonthlyLimit monthlyLimit;
        private String idempotencyKey;

        private SetMonthlyLimitRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set monthlyLimit
         * @param monthlyLimit  (optional)
         * @return SetMonthlyLimitRequestBuilder
         */
        public SetMonthlyLimitRequestBuilder monthlyLimit(SetUserLimitRequestMonthlyLimit monthlyLimit) {
            this.monthlyLimit = monthlyLimit;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return SetMonthlyLimitRequestBuilder
         */
        public SetMonthlyLimitRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for setMonthlyLimit
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> setUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SetUserLimitRequest setUserLimitRequest = buildBodyParams();
            return setMonthlyLimitCall(id, setUserLimitRequest, idempotencyKey, _callback);
        }

        private SetUserLimitRequest buildBodyParams() {
            SetUserLimitRequest setUserLimitRequest = new SetUserLimitRequest();
            setUserLimitRequest.monthlyLimit(this.monthlyLimit);
            return setUserLimitRequest;
        }

        /**
         * Execute setMonthlyLimit request
         * @return UserLimitResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> setUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public UserLimitResponse execute() throws ApiException {
            SetUserLimitRequest setUserLimitRequest = buildBodyParams();
            ApiResponse<UserLimitResponse> localVarResp = setMonthlyLimitWithHttpInfo(id, setUserLimitRequest, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setMonthlyLimit request with HTTP info returned
         * @return ApiResponse&lt;UserLimitResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> setUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserLimitResponse> executeWithHttpInfo() throws ApiException {
            SetUserLimitRequest setUserLimitRequest = buildBodyParams();
            return setMonthlyLimitWithHttpInfo(id, setUserLimitRequest, idempotencyKey);
        }

        /**
         * Execute setMonthlyLimit request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> setUserLimit 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserLimitResponse> _callback) throws ApiException {
            SetUserLimitRequest setUserLimitRequest = buildBodyParams();
            return setMonthlyLimitAsync(id, setUserLimitRequest, idempotencyKey, _callback);
        }
    }

    /**
     *  Set limit for the user 
     *  This endpoint sets the monthly limit for a user.  The limit amount must be non-negative.  To unset the monthly limit of the user, just set &#x60;monthly_limit&#x60; to null. 
     * @param id  (required)
     * @param setUserLimitRequest  (required)
     * @return SetMonthlyLimitRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setUserLimit 200 response </td><td>  -  </td></tr>
     </table>
     */
    public SetMonthlyLimitRequestBuilder setMonthlyLimit(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SetMonthlyLimitRequestBuilder(id);
    }
    private okhttp3.Call updateUserCall(String id, UpdateUserRequest updateUserRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/v2/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String id, UpdateUserRequest updateUserRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUser(Async)");
        }

        // verify the required parameter 'updateUserRequest' is set
        if (updateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequest' when calling updateUser(Async)");
        }

        return updateUserCall(id, updateUserRequest, idempotencyKey, _callback);

    }


    private ApiResponse<UserResponse> updateUserWithHttpInfo(String id, UpdateUserRequest updateUserRequest, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(id, updateUserRequest, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserAsync(String id, UpdateUserRequest updateUserRequest, String idempotencyKey, final ApiCallback<UserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(id, updateUserRequest, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<UserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserRequestBuilder {
        private final String id;
        private UpdateUserStatus status;
        private String managerId;
        private String departmentId;
        private String locationId;
        private String titleId;
        private Map<String, String> metadata;
        private String idempotencyKey;

        private UpdateUserRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set status
         * @param status  (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder status(UpdateUserStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId The user id of the manager of this user (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder managerId(String managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId  (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set locationId
         * @param locationId  (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder locationId(String locationId) {
            this.locationId = locationId;
            return this;
        }
        
        /**
         * Set titleId
         * @param titleId  (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder titleId(String titleId) {
            this.titleId = titleId;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata The metadata or customized attributes of the user. Maximum number of entries: 100 (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return UpdateUserRequestBuilder
         */
        public UpdateUserRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for updateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateUserRequest updateUserRequest = buildBodyParams();
            return updateUserCall(id, updateUserRequest, idempotencyKey, _callback);
        }

        private UpdateUserRequest buildBodyParams() {
            UpdateUserRequest updateUserRequest = new UpdateUserRequest();
            updateUserRequest.status(this.status);
            updateUserRequest.managerId(this.managerId);
            updateUserRequest.departmentId(this.departmentId);
            updateUserRequest.locationId(this.locationId);
            updateUserRequest.titleId(this.titleId);
            updateUserRequest.metadata(this.metadata);
            return updateUserRequest;
        }

        /**
         * Execute updateUser request
         * @return UserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public UserResponse execute() throws ApiException {
            UpdateUserRequest updateUserRequest = buildBodyParams();
            ApiResponse<UserResponse> localVarResp = updateUserWithHttpInfo(id, updateUserRequest, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUser request with HTTP info returned
         * @return ApiResponse&lt;UserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserResponse> executeWithHttpInfo() throws ApiException {
            UpdateUserRequest updateUserRequest = buildBodyParams();
            return updateUserWithHttpInfo(id, updateUserRequest, idempotencyKey);
        }

        /**
         * Execute updateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateUser 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserResponse> _callback) throws ApiException {
            UpdateUserRequest updateUserRequest = buildBodyParams();
            return updateUserAsync(id, updateUserRequest, idempotencyKey, _callback);
        }
    }

    /**
     *  Update user 
     *  This endpoint updates a user. Any parameters not provided will be left unchanged. 
     * @param id  (required)
     * @param updateUserRequest  (required)
     * @return UpdateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateUser 200 response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserRequestBuilder updateUser(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateUserRequestBuilder(id);
    }
}
