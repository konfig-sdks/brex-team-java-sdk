/*
 * Team API
 *  The team API lets you manage users, departments, locations, and cards. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Card;
import com.konfigthis.client.model.CardMailingAddress;
import com.konfigthis.client.model.CardNumberResponse;
import com.konfigthis.client.model.CardType;
import com.konfigthis.client.model.ChangeCardReason;
import com.konfigthis.client.model.CreateCardRequest;
import com.konfigthis.client.model.CreateCardRequestCardAttributePreferences;
import com.konfigthis.client.model.CreateCardRequestSpendControls;
import com.konfigthis.client.model.LimitType;
import com.konfigthis.client.model.LockCardRequest;
import com.konfigthis.client.model.PageCard;
import com.konfigthis.client.model.SecureEmailForCardDetailsRequest;
import com.konfigthis.client.model.TerminateCardRequest;
import com.konfigthis.client.model.UpdateCardRequest;
import com.konfigthis.client.model.UpdateCardRequestSpendControls;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardsApi
 */
@Disabled
public class CardsApiTest {

    private static CardsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CardsApi(apiClient);
    }

    /**
     *  Create card 
     *
     *  Creates a new card. The &#x60;spend_controls&#x60; field is required when &#x60;limit_type&#x60; &#x3D; &#x60;CARD&#x60;. The &#x60;mailing_address&#x60; field is required for physical cards and is the shipping address used to send the card; it is not the same as the billing and mailing address used for online purchases. The first 2 lines of this address must be under 60 characters long. Each user can only have up to 10 active physical cards. For Empower accounts, this endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewCardTest() throws ApiException {
        Object owner = null;
        String cardName = null;
        CardType cardType = null;
        LimitType limitType = null;
        String idempotencyKey = null;
        CreateCardRequestSpendControls spendControls = null;
        CardMailingAddress mailingAddress = null;
        Map<String, String> metadata = null;
        CreateCardRequestCardAttributePreferences cardAttributePreferences = null;
        Card response = api.createNewCard(owner, cardName, cardType, limitType, idempotencyKey)
                .spendControls(spendControls)
                .mailingAddress(mailingAddress)
                .metadata(metadata)
                .cardAttributePreferences(cardAttributePreferences)
                .execute();
        // TODO: test validations
    }

    /**
     *  Create secure email to send card number  
     *
     *  Creates a secure email to send card number, CVV, and expiration date of a card by ID to the specified email.  This endpoint is currently gated. If you would like to request access, please reach out to developer-access@brex.com 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSecureEmailTest() throws ApiException {
        String id = null;
        String idempotencyKey = null;
        String recipientEmail = null;
        String senderName = null;
        String message = null;
        Integer expiryDays = null;
        api.createSecureEmail(id, idempotencyKey)
                .recipientEmail(recipientEmail)
                .senderName(senderName)
                .message(message)
                .expiryDays(expiryDays)
                .execute();
        // TODO: test validations
    }

    /**
     *  Get card 
     *
     *  Retrieves a card by ID. Only cards with &#x60;limit_type &#x3D; CARD&#x60; have &#x60;spend_controls&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        Card response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     *  Get card number 
     *
     *  Retrieves card number, CVV, and expiration date of a card by ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardDetailsTest() throws ApiException {
        String id = null;
        CardNumberResponse response = api.getCardDetails(id)
                .execute();
        // TODO: test validations
    }

    /**
     *  List cards 
     *
     *  Lists all cards by a &#x60;user_id&#x60;. Only cards with &#x60;limit_type &#x3D; CARD&#x60; have &#x60;spend_controls&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByUserIdTest() throws ApiException {
        String userId = null;
        String cursor = null;
        Integer limit = null;
        PageCard response = api.listByUserId()
                .userId(userId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     *  Lock card 
     *
     *  Locks an existing, unlocked card. And the card owner will receive a notification about it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockCardTest() throws ApiException {
        ChangeCardReason reason = null;
        String id = null;
        String description = null;
        String idempotencyKey = null;
        Card response = api.lockCard(reason, id)
                .description(description)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     *  Terminate card 
     *
     *  Terminates an existing card. The card owner will receive a notification about it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateExistingCardTest() throws ApiException {
        ChangeCardReason reason = null;
        String id = null;
        String description = null;
        String idempotencyKey = null;
        Card response = api.terminateExistingCard(reason, id)
                .description(description)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     *  Unlock card 
     *
     *  Unlocks an existing card. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockExistingCardTest() throws ApiException {
        String id = null;
        String idempotencyKey = null;
        Card response = api.unlockExistingCard(id)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     *  Update card 
     *
     *  Update an existing vendor card 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCardTest() throws ApiException {
        String id = null;
        UpdateCardRequestSpendControls spendControls = null;
        Map<String, String> metadata = null;
        String idempotencyKey = null;
        Card response = api.updateCard(id)
                .spendControls(spendControls)
                .metadata(metadata)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

}
