/*
 * Team API
 *  The team API lets you manage users, departments, locations, and cards. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateUserRequest;
import com.konfigthis.client.model.PageUserResponse;
import com.konfigthis.client.model.SetUserLimitRequest;
import com.konfigthis.client.model.SetUserLimitRequestMonthlyLimit;
import com.konfigthis.client.model.UpdateUserRequest;
import com.konfigthis.client.model.UpdateUserStatus;
import com.konfigthis.client.model.UserLimitResponse;
import com.konfigthis.client.model.UserResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     *  Get current user 
     *
     *  This endpoint returns the user associated with the OAuth2 access token. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws ApiException {
        UserResponse response = api.getCurrentUser()
                .execute();
        // TODO: test validations
    }

    /**
     *  Get limit for the user 
     *
     *  This endpoint gets the monthly limit for the user including the monthly available limit. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMonthlyLimitTest() throws ApiException {
        String id = null;
        UserLimitResponse response = api.getMonthlyLimit(id)
                .execute();
        // TODO: test validations
    }

    /**
     *  Get user 
     *
     *  This endpoint gets a user by ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        String id = null;
        UserResponse response = api.getUserById(id)
                .execute();
        // TODO: test validations
    }

    /**
     *  Invite user 
     *
     *  This endpoint invites a new user as an employee. To update user&#39;s role, check out [this article](https://support.brex.com/how-do-i-change-another-user-s-role/). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteNewEmployeeTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String email = null;
        String managerId = null;
        String departmentId = null;
        String locationId = null;
        String titleId = null;
        Map<String, String> metadata = null;
        String idempotencyKey = null;
        UserResponse response = api.inviteNewEmployee(firstName, lastName, email)
                .managerId(managerId)
                .departmentId(departmentId)
                .locationId(locationId)
                .titleId(titleId)
                .metadata(metadata)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     *  List users 
     *
     *  This endpoint lists all users. To find a user id by email, you can filter using the &#x60;email&#x60; query parameter. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String cursor = null;
        Integer limit = null;
        String email = null;
        String remoteDisplayId = null;
        List<String> expand = null;
        PageUserResponse response = api.listUsers()
                .cursor(cursor)
                .limit(limit)
                .email(email)
                .remoteDisplayId(remoteDisplayId)
                .expand(expand)
                .execute();
        // TODO: test validations
    }

    /**
     *  Set limit for the user 
     *
     *  This endpoint sets the monthly limit for a user.  The limit amount must be non-negative.  To unset the monthly limit of the user, just set &#x60;monthly_limit&#x60; to null. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setMonthlyLimitTest() throws ApiException {
        String id = null;
        SetUserLimitRequestMonthlyLimit monthlyLimit = null;
        String idempotencyKey = null;
        UserLimitResponse response = api.setMonthlyLimit(id)
                .monthlyLimit(monthlyLimit)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     *  Update user 
     *
     *  This endpoint updates a user. Any parameters not provided will be left unchanged. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String id = null;
        UpdateUserStatus status = null;
        String managerId = null;
        String departmentId = null;
        String locationId = null;
        String titleId = null;
        Map<String, String> metadata = null;
        String idempotencyKey = null;
        UserResponse response = api.updateUser(id)
                .status(status)
                .managerId(managerId)
                .departmentId(departmentId)
                .locationId(locationId)
                .titleId(titleId)
                .metadata(metadata)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

}
